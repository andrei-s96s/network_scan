#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞
"""

import unittest
import sys
import os
import subprocess
from pathlib import Path


def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞...")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
    sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã
    loader = unittest.TestLoader()
    start_dir = "tests"
    suite = loader.discover(start_dir, pattern="test_*.py")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    runner = unittest.TextTestRunner(verbosity=2, stream=sys.stdout)
    result = runner.run(suite)

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:")
    print(f"   ‚Ä¢ –ó–∞–ø—É—â–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
    print(
        f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {result.testsRun - len(result.failures) - len(result.errors)}"
    )
    print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {len(result.errors)}")
    print(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–ª–æ–≤: {len(result.failures)}")

    if result.wasSuccessful():
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
        if result.errors:
            print("\nüî¥ –û—à–∏–±–∫–∏:")
            for test, traceback in result.errors:
                print(f"   ‚Ä¢ {test}: {traceback.split('AssertionError:')[-1].strip()}")

        if result.failures:
            print("\nüü° –ü—Ä–æ–≤–∞–ª—ã:")
            for test, traceback in result.failures:
                print(f"   ‚Ä¢ {test}: {traceback.split('AssertionError:')[-1].strip()}")

        return False


def run_linting():
    """–ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–∏–Ω–≥–∞ –∫–æ–¥–∞"""
    print("\nüîç –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–∏–Ω–≥–∞ –∫–æ–¥–∞...")

    try:
        result = subprocess.run(
            [
                sys.executable,
                "-m",
                "flake8",
                "config.py",
                "network_scanner.py",
                "screenshot_manager.py",
                "report_generator.py",
                "main.py",
                "tests/",
            ],
            capture_output=True,
            text=True,
        )

        if result.returncode == 0:
            print("‚úÖ –õ–∏–Ω—Ç–∏–Ω–≥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∏ –ª–∏–Ω—Ç–∏–Ω–≥–∞:")
            print(result.stdout)
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ª–∏–Ω—Ç–∏–Ω–≥–∞: {e}")
        return False


def run_type_checking():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤"""
    print("\nüîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤...")

    try:
        result = subprocess.run(
            [
                sys.executable,
                "-m",
                "mypy",
                "config.py",
                "network_scanner.py",
                "screenshot_manager.py",
                "report_generator.py",
                "main.py",
            ],
            capture_output=True,
            text=True,
        )

        if result.returncode == 0:
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏:")
            print(result.stdout)
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∏–ø–æ–≤: {e}")
        return False


def run_security_check():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüîí –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")

    try:
        result = subprocess.run(
            [sys.executable, "-m", "bandit", "-r", "."], capture_output=True, text=True
        )

        if result.returncode == 0:
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
            print(result.stdout)
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    print("=" * 50)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    tests_ok = run_tests()
    lint_ok = run_linting()
    type_ok = run_type_checking()
    security_ok = run_security_check()

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 50)
    print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚Ä¢ –¢–µ—Å—Ç—ã: {'‚úÖ' if tests_ok else '‚ùå'}")
    print(f"   ‚Ä¢ –õ–∏–Ω—Ç–∏–Ω–≥: {'‚úÖ' if lint_ok else '‚ùå'}")
    print(f"   ‚Ä¢ –¢–∏–ø–∏–∑–∞—Ü–∏—è: {'‚úÖ' if type_ok else '‚ùå'}")
    print(f"   ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {'‚úÖ' if security_ok else '‚ùå'}")

    all_passed = tests_ok and lint_ok and type_ok and security_ok

    if all_passed:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏")
        sys.exit(1)


if __name__ == "__main__":
    main()
