#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π —Å–∫–∞–Ω–µ—Ä —Å –≤–µ–±-—Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import sys
import argparse
import logging
import asyncio
from pathlib import Path
from colorama import init, Fore, Back, Style

from config import load_config
from network_scanner import AsyncNetworkScanner
from screenshot_manager import ScreenshotManager, AsyncScreenshotManager
from report_generator import ReportGenerator
from cache_manager import CacheManager
from stream_processor import StreamProcessor, StreamConfig
from compression_manager import CompressionManager
from cleanup_manager import CleanupManager
from retry_manager import RetryManager, RetryConfigs

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)


def validate_network(network_str: str) -> str:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–µ—Ç–µ–≤–æ–π –∞–¥—Ä–µ—Å"""
    import ipaddress

    try:
        network = ipaddress.IPv4Network(network_str, strict=False)
        return str(network)
    except ValueError:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ç–∏: {network_str}")


def validate_threads(threads: int) -> int:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤"""
    if threads <= 0:
        raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    if threads > 100:
        raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100")
    return threads


def print_colored(text: str, color: str = Fore.WHITE, style: str = ""):
    """–í—ã–≤–æ–¥–∏—Ç —Ü–≤–µ—Ç–Ω–æ–π —Ç–µ–∫—Å—Ç"""
    print(f"{color}{style}{text}{Style.RESET_ALL}")


async def main_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–°–µ—Ç–µ–≤–æ–π —Å–∫–∞–Ω–µ—Ä —Å –≤–µ–±-—Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py 172.30.1.0/24 10
  python main.py 192.168.1.0/24 5 --no-reports
  python main.py 10.0.0.0/24 20 --config custom_config.yaml
  python main.py 192.168.1.0/24 --async-scan  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  python main.py 192.168.1.0/24 --use-cache  # –° –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  python main.py 192.168.1.0/24 --stream-process  # –ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
  python main.py 192.168.1.0/24 --compress-results  # –°–∂–∞—Ç–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  python main.py 192.168.1.0/24 --auto-cleanup  # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞
  python main.py 192.168.1.0/24 --retry-failed  # –ü–æ–≤—Ç–æ—Ä –ø–æ–ø—ã—Ç–æ–∫
        """,
    )

    parser.add_argument(
        "network", help="–°–µ—Ç—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 192.168.1.0/24)"
    )

    parser.add_argument(
        "threads",
        type=int,
        nargs="?",
        default=10,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)",
    )

    parser.add_argument(
        "--no-reports",
        action="store_true",
        help="–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å JSON –∏ HTML –æ—Ç—á–µ—Ç—ã (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π)",
    )

    parser.add_argument("--config", type=Path, help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    parser.add_argument(
        "--output-dir",
        type=Path,
        default=Path("."),
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
    )

    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")

    parser.add_argument(
        "--async-scan", 
        action="store_true", 
        help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
    )

    parser.add_argument(
        "--use-cache",
        action="store_true",
        help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    )

    parser.add_argument(
        "--stream-process",
        action="store_true",
        help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–µ—Ç–µ–π"
    )

    parser.add_argument(
        "--compress-results",
        action="store_true",
        help="–°–∂–∏–º–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    )

    parser.add_argument(
        "--auto-cleanup",
        action="store_true",
        help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
    )

    parser.add_argument(
        "--retry-failed",
        action="store_true",
        help="–ü–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö"
    )

    args = parser.parse_args()

    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        network = validate_network(args.network)
        threads = validate_threads(args.threads)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        if args.verbose:
            config.log_level = "DEBUG"
        config.output_dir = args.output_dir

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        config.setup_logging()
        logger = logging.getLogger(__name__)

        print_colored("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞", Fore.CYAN, Style.BRIGHT)
        print_colored(f"–°–µ—Ç—å: {network}", Fore.GREEN)
        print_colored(f"–ü–æ—Ç–æ–∫–∏: {threads}", Fore.GREEN)
        print_colored(f"–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {config.output_dir}", Fore.GREEN)
        
        if args.async_scan:
            print_colored("‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ", Fore.YELLOW, Style.BRIGHT)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if not network.startswith(("192.168.", "172.", "10.", "127.")):
            print_colored("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π —Å–µ—Ç–∏!", Fore.RED, Style.BRIGHT)
            print_colored(
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π —Å–µ—Ç–∏",
                Fore.RED
            )

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        scanner = AsyncNetworkScanner(config)
        report_gen = ReportGenerator(config.output_dir)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        cache_mgr = CacheManager() if args.use_cache else None
        compression_mgr = CompressionManager() if args.compress_results else None
        cleanup_mgr = CleanupManager() if args.auto_cleanup else None
        retry_mgr = RetryManager(RetryConfigs.network_scan()) if args.retry_failed else None

        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏
        print_colored("üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏...", Fore.CYAN)
        
        async def perform_scan():
            """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –æ–ø—Ü–∏–π"""
            if args.stream_process:
                # –ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–µ—Ç–µ–π
                print_colored("üåä –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É", Fore.CYAN)
                stream_config = StreamConfig(
                    batch_size=100,
                    max_memory_mb=512,
                    save_interval=50
                )
                stream_processor = StreamProcessor(config, stream_config)
                
                all_results = []
                async for batch_results in stream_processor.process_network_stream(network):
                    all_results.extend(batch_results)
                    print_colored(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω –ø–∞–∫–µ—Ç: {len(batch_results)} —Ö–æ—Å—Ç–æ–≤", Fore.GREEN)
                
                return all_results
            else:
                # –û–±—ã—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                if args.async_scan:
                    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                    if retry_mgr:
                        return await retry_mgr.retry_async(
                            scanner.scan_network_async, network, max_workers=threads
                        )
                    else:
                        return await scanner.scan_network_async(network, max_workers=threads)
                else:
                    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                    if retry_mgr:
                        return retry_mgr.retry_sync(
                            scanner.scan_network, network, max_workers=threads
                        )
                    else:
                        return scanner.scan_network(network, max_workers=threads)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if args.use_cache and cache_mgr:
            cached_results = cache_mgr.get(network, threads=threads, async_scan=args.async_scan)
            if cached_results:
                print_colored("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞", Fore.GREEN)
                scan_results = cached_results
            else:
                print_colored("üîÑ –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", Fore.YELLOW)
                scan_results = await perform_scan()
        else:
            scan_results = await perform_scan()

        if not scan_results:
            print_colored("üì≠ –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Å—Ç–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏", Fore.YELLOW)
            return

        print_colored(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {len(scan_results)} —Ö–æ—Å—Ç–æ–≤", Fore.GREEN)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if args.use_cache and cache_mgr:
            cache_saved = cache_mgr.set(network, scan_results, threads=threads, async_scan=args.async_scan)
            if cache_saved:
                print_colored("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à", Fore.GREEN)
            else:
                print_colored("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫—ç—à", Fore.YELLOW)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        screenshots_count = {}
        if scan_results:
            print_colored("üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...", Fore.CYAN)
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–µ—Ç–∏
            network_name = network.replace('/', '_')
            network_dir = config.output_dir / f"scan-{network_name}"
            network_dir.mkdir(parents=True, exist_ok=True)
            
            if args.async_scan:
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
                async with AsyncScreenshotManager(config) as screenshot_mgr:
                    screenshots_count = await screenshot_mgr.create_screenshots_async(
                        scan_results, network_dir
                    )
            else:
                # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                with ScreenshotManager(config) as screenshot_mgr:
                    screenshots_count = screenshot_mgr.create_screenshots(
                        scan_results, network_dir
                    )

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
        print_colored("üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤...", Fore.CYAN)

        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è
        text_report = report_gen.save_text_report(scan_results, network)
        print_colored(f"üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç: {text_report}", Fore.GREEN)

        # JSON –∏ HTML –æ—Ç—á–µ—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞—é—Ç—Å—è)
        if not args.no_reports:
            json_report = report_gen.save_json_report(
                scan_results, network, screenshots_count
            )
            html_report = report_gen.save_html_report(
                scan_results, network, screenshots_count
            )
            print_colored(f"üìä JSON –æ—Ç—á–µ—Ç: {json_report}", Fore.GREEN)
            print_colored(f"üåê HTML –æ—Ç—á–µ—Ç: {html_report}", Fore.GREEN)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_ports = sum(len(result.open_ports) for result in scan_results)
        total_screenshots = sum(screenshots_count.values())
        total_scan_time = sum(result.scan_time for result in scan_results)

        print_colored("üéâ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!", Fore.GREEN, Style.BRIGHT)
        print_colored("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", Fore.CYAN)
        print_colored(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ö–æ—Å—Ç–æ–≤: {len(scan_results)}", Fore.WHITE)
        print_colored(f"   ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤: {total_ports}", Fore.WHITE)
        print_colored(f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {total_screenshots}", Fore.WHITE)
        print_colored(f"   ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {total_scan_time:.2f}—Å", Fore.WHITE)

        # –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        all_services = set()
        for result in scan_results:
            for port in result.open_ports.keys():
                all_services.add(report_gen._get_service_name(port))

        if all_services:
            print_colored("üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: " + ", ".join(sorted(all_services)), Fore.YELLOW)

        # –°–∂–∞—Ç–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if args.compress_results and compression_mgr:
            print_colored("üóúÔ∏è –°–∂–∏–º–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...", Fore.CYAN)
            network_name = network.replace('/', '_')
            scan_dir = config.output_dir / f"scan-{network_name}"
            
            if scan_dir.exists():
                compressed_path = compression_mgr.compress_scan_results(scan_dir)
                if compressed_path:
                    print_colored(f"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∂–∞—Ç—ã: {compressed_path.name}", Fore.GREEN)
                else:
                    print_colored("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", Fore.YELLOW)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if args.auto_cleanup and cleanup_mgr:
            print_colored("üßπ –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É...", Fore.CYAN)
            cleanup_stats = cleanup_mgr.full_cleanup()
            if cleanup_stats['total_bytes_freed'] > 0:
                mb_freed = cleanup_stats['total_bytes_freed'] / (1024 * 1024)
                print_colored(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ: {cleanup_stats['total_files_removed']} —Ñ–∞–π–ª–æ–≤, {mb_freed:.2f} –ú–ë", Fore.GREEN)
            else:
                print_colored("‚ú® –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–∂–µ –æ—á–∏—â–µ–Ω—ã", Fore.GREEN)

    except KeyboardInterrupt:
        print_colored("‚èπÔ∏è  –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", Fore.RED)
        sys.exit(1)
    except ValueError as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}", Fore.RED)
        sys.exit(1)
    except Exception as e:
        print_colored(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", Fore.RED)
        if args.verbose:
            import traceback
            print_colored(traceback.format_exc(), Fore.RED)
        sys.exit(1)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        asyncio.run(main_async())
    except KeyboardInterrupt:
        print_colored("‚èπÔ∏è  –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", Fore.RED)
        sys.exit(1)


if __name__ == "__main__":
    main()
